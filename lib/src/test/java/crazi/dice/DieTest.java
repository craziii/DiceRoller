/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package crazi.dice;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import static org.junit.Assert.*;

public class DieTest {

    static int ROLL_COUNT = 1000000;

    @Test public void checkCommonD2() {
        Die d2 = CommonDie.D2();
        assertTrue("d2 should have 2 sides", checkSides(d2));
        assertTrue("d2 sides should be equal in size", checkSidesNum(d2,2));
        assertTrue("d2 should be between 1 and the d number", checkDiceRollingRange(d2, 1, d2.getSides().size(), ROLL_COUNT));
    }

    @Test public void checkCommonD4() {
        Die d4 = CommonDie.D4();
        assertTrue("d4 should have 4 sides", checkSides(d4));
        assertTrue("d4 sides should be equal in size", checkSidesNum(d4,4));
        assertTrue("d4 should be between 1 and the d number", checkDiceRollingRange(d4, 1, d4.getSides().size(), ROLL_COUNT));
    }

    @Test public void checkCommonD6() {
        Die d6 = CommonDie.D6();
        assertTrue("d6 should have 6 sides", checkSides(d6));
        assertTrue("d6 sides should be equal in size", checkSidesNum(d6,6));
        assertTrue("d6 should be between 1 and the d number", checkDiceRollingRange(d6, 1, d6.getSides().size(), ROLL_COUNT));
    }

    @Test public void checkCommonD8() {
        Die d8 = CommonDie.D8();
        assertTrue("d8 should have 8 sides", checkSides(d8));
        assertTrue("d8 sides should be equal in size", checkSidesNum(d8,8));
        assertTrue("d6 should be between 1 and the d number", checkDiceRollingRange(d8, 1, d8.getSides().size(), ROLL_COUNT));
    }

    @Test public void checkCommonD10() {
        Die d10 = CommonDie.D10();
        assertTrue("d10 should have 10 sides", checkSides(d10));
        assertTrue("d10 sides should be equal in size", checkSidesNum(d10,10));
        assertTrue("d6 should be between 1 and the d number", checkDiceRollingRange(d10, 1, d10.getSides().size(), ROLL_COUNT));
    }

    @Test public void checkCommonD12() {
        Die d12 = CommonDie.D12();
        assertTrue("d12 should have 12 sides", checkSides(d12));
        assertTrue("d12 sides should be equal in size", checkSidesNum(d12,12));
        assertTrue("d6 should be between 1 and the d number", checkDiceRollingRange(d12, 1, d12.getSides().size(), ROLL_COUNT));
    }

    @Test public void checkCommonD20() {
        Die d20 = CommonDie.D20();
        assertTrue("d20 should have 20 sides", checkSides(d20));
        assertTrue("d20 sides should be equal in size", checkSidesNum(d20,20));
        assertTrue("d6 should be between 1 and the d number", checkDiceRollingRange(d20, 1, d20.getSides().size(), ROLL_COUNT));
    }

    @Test public void checkCommonD100() {
        Die d100 = CommonDie.D100();
        assertTrue("d100 should have 100 sides", checkSides(d100));
        assertTrue("d100 sides should be equal in size", checkSidesNum(d100,100));
        assertTrue("d6 should be between 1 and the d number", checkDiceRollingRange(d100, 1, d100.getSides().size(), ROLL_COUNT));
    }

    @Test public void checkUnfairDie(){
        Random random = new Random();
        Die.DieBuilder builder = new Die.DieBuilder(false);
        builder.addDieSide(new Die.DieSide(1,1));
        builder.addDieSide(new Die.DieSide(2,1000));
        try {
            Die unfairDie = builder.build();
            assertTrue(checkFairness(unfairDie, ROLL_COUNT, random));
        }
        catch (Exception ex){
            assertTrue(ex == null);
        }
    }

    @Test public void checkRandomUnfairDie(){
        Random random = new Random();
        Die.DieBuilder builder = new Die.DieBuilder(false);
        for(int side = 0; side < 100; side++){
            builder.addDieSide(new Die.DieSide(side+1, random.nextFloat()));
        }
        try {
            Die unfairDie = builder.build();
            assertNotNull(unfairDie);
            assertTrue(checkFairness(unfairDie, ROLL_COUNT, random));
        }
        catch (Exception ex){
            assertTrue(ex == null);
        }
    }

    private boolean checkSides(Die die){
        return die.getSides().stream().noneMatch((x) -> x.weight != 1);
    }

    private boolean checkSidesNum(Die die, int sidesNum){
        return sidesNum == die.getSides().size();
    }

    private boolean checkDiceRollingRange(Die die, int min, int max, int rollCount) {
        Random random = new Random();
        List<Integer> results = new ArrayList<>();
        for(int count = 0; count < rollCount; count++){
            results.add(die.rollAndReturnVal(random));
        }
        return results.stream().noneMatch((x) -> x > max) && results.stream().noneMatch((x) -> x < min);
    }

    private boolean checkFairness(Die die, int rollCount, Random random){
        List<Integer> results = new ArrayList<>();
        for(int count = 0; count < rollCount; count++){
            results.add(die.rollAndReturnVal(random));
        }
        double totalWeight = die.getSides().stream().mapToDouble((x) -> x.weight).sum();
        for(Die.DieSide side : die.getSides()){
            int expectedRolls = (int) ((side.weight / totalWeight) * rollCount);
            int lowerBound = (int) (expectedRolls - expectedRolls * 0.05);
            int upperBound = (int) (expectedRolls + expectedRolls * 0.05);
            if(results.stream().filter((x) -> x.intValue() == side.val).count() < lowerBound && results.stream().filter((x) -> x.intValue() == side.val).count() > upperBound){
                return false;
            }
        }
        return true;
    }
}
